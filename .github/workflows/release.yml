name: Release New Version

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      binary_download_url: ${{ steps.upload_release_asset.outputs.browser_download_url }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Install Rust Tools
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Build Code
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target-dir ./release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: RELEASE_CHANGELOG.md
          draft: false
          prerelease: false
      - name: Upload Release Binary
        id: upload_release_asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/release/venv-wrapper
          asset_name: venv-wrapper
          asset_content_type: application/octet-stream
  
  #publish_crates_io:
  #  needs: [create_release]
  #  name: Publish to crates.io
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Checkout Code
  #      uses: actions/checkout@v2
  #    - name: Install Rust Tools
  #      uses: actions-rs/toolchain@v1
  #      with:
  #        profile: minimal
  #        toolchain: stable
  #        override: true
  #    - name: Publish to crates.io
  #      uses: actions-rs/cargo@v1
  #      with:
  #        command: publish
  #        args: --token ${{ secrets.CRATES_IO_API_TOKEN }}
  
  publish_aur:
    needs: [create_release]
    name: Publishto AUR
    runs-on: ubuntu-latest
    container: archlinux:latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          path: venv-wrapper
      - name: Download Latest Binary
        run: curl -Lo venv-wrapper-compiled ${{ needs.create_release.outputs.binary_download_url }}
      - name: Get Binary SHA256
        id: get_binary_sha256
        run: echo ::set-output name=bin_sha256::$(sha256sum venv-wrapper-compiled | cut -d ' ' -f1)
      - name: Get Release Version
        id: get_release_version
        run: echo ::set-output name=release_version::$(echo "${{ github.ref }}" | grep -oh "[[:digit:]]\.[[:digit:]]\.[[:digit:]]")
      - name: Install Git & Binutils & SSH
        run: pacman --noconfirm -Sy && pacman --noconfirm -S git binutils openssh
      - name: Add Build User
        run: useradd build && chown -R build:build ./
      - name: Generate Package Info
        working-directory: ${{ github.workspace }}/venv-wrapper/packaging
        run: |
          PKGVER=${{ steps.get_release_version.outputs.release_version }} SHA256SUM=${{ steps.get_binary_sha256.outputs.bin_sha256 }} ./gen_pkgbuild.sh > PKGBUILD
          su build -c 'makepkg --printsrcinfo > .SRCINFO'
      - name: Show Directory Info
        run: |
          pwd
          ls -lah
      - name: Save AUR SSH Key
        run: echo "${{ secrets.AUR_SSH_KEY_BASE64 }}" | base64 -d > ./aur_ssh_key
      - name: Clone AUR Repo
        run: GIT_SSH_COMMAND="ssh -i ./aur_ssh_key -o StrictHostKeyChecking=no" git clone ssh://aur@aur.archlinux.org/venv-wrapper-bin.git
      - name: Show Directory Info
        run: |
          pwd
          ls -lah
      - name: Update AUR Package
        working-directory: ${{ github.workspace }}/venv-wrapper-bin
        run: |
          git config user.name github-actions
          git config user.email noreply@github.com
          cp ${{ github.workspace }}/venv-wrapper-bin/PKGBUILD ./
          cp ${{ github.workspace }}/venv-wrapper-bin/.SRCINFO ./
          git add .
          git commit -m "Update to version ${{ steps.get_release_version.outputs.release_version }}"
          GIT_SSH_COMMAND="ssh -i ./aur_ssh_key -o StrictHostKeyChecking=no" git push
      - name: Remove SSH key
        run: rm ${{ github.workspace }}/aur_ssh_key
